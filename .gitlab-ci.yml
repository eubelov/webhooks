# tags
# CI - для сборки приложений и создания контейнеров и unit тестов любых задач
# HEAVY - для сборки и выполнения резурсоемких задач
# LIGHT - для сборки и выполнения задач сборка которых происходит быстро и не требует большого количества ресурсов

# CD_TEST_01 - для деплоя в TEST01
# CD_TEST_02 - для деплоя в test02
# CD_TEST_03 - для деплоя в test03
# CD_DEV_01 - для деплоя в dev
# CD_DEV_02 - для деплоя в dev2
# CD_ZAOCHNIK - для деплоя в zaochnik
# CD_STAGING - для деплоя в stahing
# CD_PROD_01 - для деплоя в production-01


stages:
  - build
  - unitTest
  - publish
  - createDockerImage
  - deploy

variables:
  CONSTAINER_NAME: webhooks-service-host
  SERVICE_NAME: webhooks-service
  IMAGE_NAME: "${CI_DOCKER_REGISTRY}/webhooksservice/webhooks-service-host:${CI_COMMIT_REF_NAME}"
  SERVICE_CSPROJ: ./src/Webhooks.Host/Webhooks.Host.csproj
  PUBLISH_PATH: ./publish/$CI_PIPLINE_ID

  DEV01_RABBIT_VIRTUAL_HOST: "dev01"
  DEV02_RABBIT_VIRTUAL_HOST: "dev02"
  TEST01_RABBIT_VIRTUAL_HOST: "test01"
  TEST02_RABBIT_VIRTUAL_HOST: "test02"
  TEST03_RABBIT_VIRTUAL_HOST: "test03"
  ZAOCHNIK_RABBIT_VIRTUAL_HOST: "zaochnik"
  STAGING_RABBIT_VIRTUAL_HOST: "stage"

##
# Build image on build host
##

Build:
  stage: build
  tags:
    - CI
  script:
    - DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER=0 dotnet restore --configfile Nuget.Config
    - dotnet build --no-restore

##
# Unit test on build host
##

Unit Test:
  stage: unitTest
  tags:
    - CI
  script:
    - dotnet test --configuration release --framework net6.0 --runtime linux-x64 /nodereuse:false --verbosity normal --test-adapter-path:. --logger:"junit;LogFilePath=..\artifacts\{assembly}-test-result.xml;MethodFormat=Class;FailureBodyFormat=Verbose"
  artifacts:
    name: "Test ${CI_COMMIT_REF_NAME}"
    when: on_success
    paths:
      - ./**/*test-result.xml
    reports:
      junit:
        - ./**/*test-result.xml
    expire_in: 1d
  dependencies: []

Publish:
  stage: publish
  variables:
    GIT_STRATEGY: none
  tags:
    - CI
  script:
    - dotnet publish $SERVICE_CSPROJ --configuration release --no-self-contained --framework net6.0  --runtime linux-x64 /nodereuse:false --output ./publish
  artifacts:
    name: "Build ${CI_COMMIT_REF_NAME}"
    when: on_success
    paths:
      - publish/
      - Dockerfile
    expire_in: 1h

##
# Create and push to NEXUS docker image
##  

.AbstractCreateDockerImage:
  stage: createDockerImage
  tags:
    - CI
  variables:
    GIT_STRATEGY: none
  script:
    - docker build -f Dockerfile . --force-rm --progress plain --tag $IMAGE_NAME
    - docker login --username $CI_DOCKER_REGISTRY_USER --password $CI_DOCKER_REGISTRY_PASSWORD $CI_DOCKER_REGISTRY
    - docker push $IMAGE_NAME
    - docker logout $CI_DOCKER_REGISTRY
    - docker image rm $IMAGE_NAME || true
    - docker image rm $(docker images --filter dangling=true --quiet) || true
  dependencies:
    - Build

Create Docker Image:
  extends: .AbstractCreateDockerImage

##
# Deploy stages
##

.AbstractDeploy:
  stage: deploy
  variables:
    GIT_STRATEGY: none
    CONTAINER_NAME: ""
    ENVIRONMENT: ""
  before_script:
    - docker container rm --force --volumes $CONTAINER_NAME || true
    - docker login --username $CI_DOCKER_REGISTRY_USER --password $CI_DOCKER_REGISTRY_PASSWORD $CI_DOCKER_REGISTRY
    - docker pull $IMAGE_NAME
  after_script:
    - docker logout $CI_DOCKER_REGISTRY
    - docker image prune --all --force || true
  dependencies: []
  when: manual

Deploy Dev01:
  extends: .AbstractDeploy
  tags:
    - CD_DEV_01
  variables:
    CONTAINER_NAME: "$CONSTAINER_NAME-dev01"
    ENVIRONMENT: "Development"
    DB_TEST_CONNECTIONSTRING: "Host=$TEST_DB_HOST;Port=$TEST_DB_PORT;Database=$DEV01_DB_NAME;Username=$DEV01_DB_USER_NAME;Password=$DEV01_DB_USER_PASSWORD"
  script:
    - docker run
      --detach
      --name=$CONTAINER_NAME
      --restart=always
      --env ASPNETCORE_ENVIRONMENT=$ENVIRONMENT
      --env RabbitSettings__VirtualHost=$DEV01_RABBIT_VIRTUAL_HOST
      --env "ConnectionStrings__postgresConnection"=$DB_TEST_CONNECTIONSTRING
      $IMAGE_NAME
  needs: ["Create Docker Image"]

Deploy Dev02:
  extends: .AbstractDeploy
  tags:
    - CD_DEV_02
  variables:
    CONTAINER_NAME: "$CONSTAINER_NAME-dev02"
    ENVIRONMENT: "Development"
    DB_TEST_CONNECTIONSTRING: "Host=$TEST_DB_HOST;Port=$TEST_DB_PORT;Database=$DEV02_DB_NAME;Username=$DEV02_DB_USER_NAME;Password=$DEV02_DB_USER_PASSWORD"
  script:
    - docker run
      --detach
      --name=$CONTAINER_NAME
      --restart=always
      --env ASPNETCORE_ENVIRONMENT=$ENVIRONMENT
      --env RabbitSettings__VirtualHost=$DEV02_RABBIT_VIRTUAL_HOST
      --env "ConnectionStrings__postgresConnection"=$DB_TEST_CONNECTIONSTRING
      $IMAGE_NAME
  needs: ["Create Docker Image"]

Deploy Test 1:
  extends: .AbstractDeploy
  tags:
    - CD_TEST_01
  variables:
    CONTAINER_NAME: "$CONSTAINER_NAME-test1"
    ENVIRONMENT: "Development"
    DB_TEST_CONNECTIONSTRING: "Host=$TEST_DB_HOST;Port=$TEST_DB_PORT;Database=$TEST01_DB_NAME;Username=$TEST01_DB_USER_NAME;Password=$TEST01_DB_USER_PASSWORD"
  script:
    - docker run
      --detach
      --name=$CONTAINER_NAME
      --restart=always
      --env ASPNETCORE_ENVIRONMENT=$ENVIRONMENT
      --env RabbitSettings__VirtualHost=$TEST01_RABBIT_VIRTUAL_HOST
      --env "ConnectionStrings__postgresConnection"=$DB_TEST_CONNECTIONSTRING
      $IMAGE_NAME
  needs: ["Create Docker Image"]

Deploy Test 2:
  extends: .AbstractDeploy
  tags:
    - CD_TEST_02
  variables:
    CONTAINER_NAME: "$CONSTAINER_NAME-test2"
    ENVIRONMENT: "Development"
    DB_TEST_CONNECTIONSTRING: "Host=$TEST_DB_HOST;Port=$TEST_DB_PORT;Database=$TEST02_DB_NAME;Username=$TEST02_DB_USER_NAME;Password=$TEST02_DB_USER_PASSWORD" 
  script:
    - docker run
      --detach
      --name=$CONTAINER_NAME
      --restart=always
      --env ASPNETCORE_ENVIRONMENT=$ENVIRONMENT
      --env RabbitSettings__VirtualHost=$TEST02_RABBIT_VIRTUAL_HOST
      --env "ConnectionStrings__postgresConnection"=$DB_TEST_CONNECTIONSTRING
      $IMAGE_NAME
  needs: ["Create Docker Image"]

Deploy Test 3:
  extends: .AbstractDeploy
  tags:
    - CD_TEST_03
  variables:
    CONTAINER_NAME: "$CONSTAINER_NAME-test3"
    ENVIRONMENT: "Development"
    DB_TEST_CONNECTIONSTRING: "Host=$TEST_DB_HOST;Port=$TEST_DB_PORT;Database=$TEST03_DB_NAME;Username=$TEST03_DB_USER_NAME;Password=$TEST03_DB_USER_PASSWORD"
  script:
    - docker run
      --detach
      --name=$CONTAINER_NAME
      --restart=always
      --env ASPNETCORE_ENVIRONMENT=$ENVIRONMENT
      --env RabbitSettings__VirtualHost=$TEST03_RABBIT_VIRTUAL_HOST
      --env "ConnectionStrings__postgresConnection"=$DB_TEST_CONNECTIONSTRING
      $IMAGE_NAME
  needs: ["Create Docker Image"]

Deploy Zaochnik:
  extends: .AbstractDeploy
  tags:
    - CD_ZAOCHNIK
  only:
    - release
    - master
  variables:
    CONTAINER_NAME: "$CONSTAINER_NAME-zaochnik"
    ENVIRONMENT: "Development"
    DB_TEST_CONNECTIONSTRING: "Host=$TEST_DB_HOST;Port=$TEST_DB_PORT;Database=$ZAOCHNIK_DB_NAME;Username=$ZAOCHNIK_DB_USER_NAME;Password=$ZAOCHNIK_DB_USER_PASSWORD"
  script:
    - docker run
      --detach
      --name=$CONTAINER_NAME
      --restart=always
      --env ASPNETCORE_ENVIRONMENT=$ENVIRONMENT
      --env RabbitSettings__VirtualHost=$ZAOCHNIK_RABBIT_VIRTUAL_HOST
      --env "ConnectionStrings__postgresConnection"=$DB_TEST_CONNECTIONSTRING
      $IMAGE_NAME
  needs: ["Create Docker Image"]

Deploy Staging:
  extends: .AbstractDeploy
  tags:
    - CD_STAGING
  only:
    - release
    - master
  variables:
    CONTAINER_NAME: "$CONSTAINER_NAME-staging"
    ENVIRONMENT: "Development"
    DB_TEST_CONNECTIONSTRING: "Host=$TEST_DB_HOST;Port=$TEST_DB_PORT;Database=$STAGING_DB_NAME;Username=$STAGING_DB_USER_NAME;Password=$STAGING_DB_USER_PASSWORD"
  script:
    - docker run
      --detach
      --name=$CONTAINER_NAME
      --restart=always
      --env RabbitSettings__VirtualHost=$STAGING_RABBIT_VIRTUAL_HOST
      --env ConnectionStrings__PostgresConnection=$DB_TEST_CONNECTIONSTRING
      $IMAGE_NAME
  needs: ["Create Docker Image"]

Deploy Prod 1:
  extends: .AbstractDeploy
  tags:
    - CD_PROD_01
  only:
    - master
    - release
  variables:
    CONTAINER_NAME: "$CONSTAINER_NAME-prod"
    ENVIRONMENT: "Production"
  script:
    - docker run
      --detach
      --name=$CONTAINER_NAME
      --restart=always
      --env ASPNETCORE_ENVIRONMENT=$ENVIRONMENT
      --env ConnectionStrings__PostgresConnection=$POSTGRES_CONNECTIONSTRING
      $IMAGE_NAME
  needs: [ "Create Docker Image" ]